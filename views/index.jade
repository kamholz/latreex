extends base

append js
  script(type='text/javascript',src='#{basepath}js/jquery.tooltip.min.js')
  script(type='text/javascript').
    var basepath = '#{basepath}';
    $(document).ready(function () {
      $().tooltip();
      var height = $('#tooltip').innerHeight();
      $('img.tooltip').tooltip({ showURL: false, top: -height, left: 20 });

      var form = $('#form');
      var previewImage = $('#previewImage');

      $('#fontoptToggle a').click(function () {
        var el = $(this);
        var target = $('#' + el.data('div'));

        target.toggle();

        if (target.css('display') === 'none') el.css('font-weight', 'normal');
        else el.css('font-weight', 'bold');
      });

      $('#preview').click(function () {
        previewImage.html('Loading preview...');
        $.post(basepath+'png', $('#form').serializeArray(), function (data) {
          previewImage.html('');
          previewImage.append($("<img />").attr('src', basepath+'png/'+data.id));
        });
      });

      $('#latex').click(function () { downloadFile('tex') });
      $('#pdf').click(function () { downloadFile('pdf') });

      $('#template').click(function () {
        var json = prompt("Paste the indicated line from the LaTeX source:");
        if (!json) return;
        json = $.parseJSON(json.trim().replace(/^%\s*/,''));

        for (var i in json) {
          var elt = form.find('[name='+i+']');
          if (elt.size() > 1) elt.val([json[i]]);
          else elt.val(json[i]);
        }
      });
    });

    function downloadFile(ext) {
      $.post(basepath+ext, $('#form').serializeArray(), function (data) {
        window.location.pathname = basepath+ext+'/'+data.id+'/'+data.name+'.'+ext;
      });
    }

block body
  h1 LaTreeX: LaTeX-based tree generator

  form#form(method='post',action='/')

    .left
      #space.rowform
        ul
          li
            label.wide Space between sibling nodes:
            input(type='text',name='treesep',tabindex=1,value='4ex',size=6,maxlength=6)
            img.tooltip(src='#{basepath}images/question.png',title='Space between daughters of the same parent, e.g., <i>Baltic</i> and <i>Slavic</i>')
          li
            label.wide Parent to daughter length:
            input(type='text',name='levelsep',tabindex=2,value='2cm',size=6,maxlength=6)
            img.tooltip(src='#{basepath}images/question.png',title='Length between parents and daughters, e.g., <i>Balto-Slavic</i> and <i>Baltic</i>')
          li
            label.wide Maximum node label width:
            input(type='text',name='LFTwidth',tabindex=3,value='15ex',size=6,maxlength=6)
            img.tooltip(src='#{basepath}images/question.png',title='Maximum width of node labels (language/family names) before wrapping to another line<br>(can be overridden for an individual label by appending ~ to it)')
          li
            label.wide Node label padding:
            input(type='text',name='LFTsep',tabindex=4,value='4pt',size=6,maxlength=6)
            img.tooltip(src='#{basepath}images/question.png',title='Whitespace padding/cushion around node labels (language/family names)')
          li
            label.wide Line thickness:
            input(type='text',name='linewidth',tabindex=5,value='0.3pt',size=6,maxlength=6)
            img.tooltip(src='#{basepath}images/question.png',title='Thickness of lines connecting nodes')

      .rowform.left
        ul
          li Style:
            img.tooltip(src='#{basepath}images/question.png',title='In non-flat trees, parent and daughter nodes are always the same distance apart.<br>In flat trees, leaf nodes (nodes with no children) are all displayed parallel to each other.<br>The flat style is generally only practical for smaller trees.')
          li
            input#style_nonflat(type='radio',name='style',value='nonflat',checked='checked',tabindex=7)
            label(for='style_nonflat') Non-flat
          li
            input#style_flat(type='radio',name='style',value='flat',tabindex=6)
            label(for='style_flat') Flat

      .rowform.left
        ul
          li Direction:
          li
            input#orient_D(type='radio',name='orient',value='D',checked='checked',tabindex=8)
            label(for='orient_D') Top to bottom
          li
            input#orient_R(type='radio',name='orient',value='R',tabindex=9)
            label(for='orient_R') Left to right
          li
            input#orient_L(type='radio',name='orient',value='L',tabindex=10)
            label(for='orient_L') Right to left
          li
            input#orient_U(type='radio',name='orient',value='U',tabindex=11)
            label(for='orient_U') Bottom to top

      .rowform.left#font
        ul
          li Font:
          li
            select#fontselect(name='font')
              option(value='arial') Arial
              option(value='bookman') Bookman
              option(value='schoolbook') Century Schoolbook
              option(value='charis') Charis SIL
              option(value='charter') Charter
              option(value='cm') CMU Serif
              option(value='courier') Courier
              option(value='courier_new') Courier New
              option(value='helvetica') Helvetica
              option(value='noto_mono') Noto Mono
              option(value='noto_sans', selected='selected') Noto Sans
              option(value='noto_serif') Noto Serif
              option(value='palatino') Palatino
              option(value='times') Times
              option(value='times_mac') Times (Mac)
          li#fontoptToggle
            | Script font overrides: 
            a(data-div='arabic', href='javascript:void(0)') Arabic
            | , 
            a(data-div='cjk', href='javascript:void(0)') CJK
            | , 
            a(data-div='greek', href='javascript:void(0)') Greek
            | , 
            a(data-div='hebrew', href='javascript:void(0)') Hebrew
            | , 
            a(data-div='syriac', href='javascript:void(0)') Syriac
        div#fontopt
          ul
            div#arabic
              li Arabic:
              li
                select(name='arabic')
                  option(value='amiri', selected='selected') Amiri
                  option(value='arefruqaa') Aref Ruqaa
                  option(value='hussaini_nastaleeq') Hussaini Nastaleeq
                  option(value='noto_kufi') Noto Kufi Arabic
                  option(value='noto_naskh') Noto Naskh Arabic
                  option(value='noto_nastaliq') Noto Nastaliq Urdu
            div#cjk
              li CJK:
              li
                select(name='cjk')
                  option(value='adobe_kaiti') Adobe Kaiti Std
                  option(value='babelstone') BabelStone Han
                  option(value='noto_jp') Noto Sans CJK JP
                  option(value='noto_kr') Noto Sans CJK KR
                  option(value='noto_sc', selected='selected') Noto Sans CJK SC
                  option(value='noto_tc') Noto Sans CJK TC
                  option(value='stkaiti') STKaiti
            div#greek
              li Greek:
              li
                select(name='greek')
                  option(value='noop', selected='selected') (same as above)
                  option(value='alfios') Alfios
                  option(value='didot') GFS Didot Classic
                  option(value='neohellenic') GFS NeoHellenic
                  option(value='porson') GFS Porson
                  option(value='noto_mono') Noto Mono
                  option(value='noto_sans') Noto Sans
                  option(value='noto_serif') Noto Serif
                  option(value='times_mac') Times
            div#hebrew
              li Hebrew:
              li
                select(name='hebrew')
                  option(value='david') David CLM
                  option(value='ezra') Ezra SIL
                  option(value='mekorot_rashi') Mekorot Rashi
                  option(value='mekorot_vilna') Mekorot Vilna
                  option(value='noto_hebrew', selected='selected') Noto Sans
            div#syriac
              li Syriac:
              li
                select(name='syriac')
                  option(value='syriac_eastern') Noto Sans Syriac Eastern
                  option(value='syriac_estrangela', selected='selected') Noto Sans Syriac Estrangela
                  option(value='syriac_western') Noto Sans Syriac Western

    .left
      p Enter tree:
        img.tooltip(src='#{basepath}images/question.png',title='Enter one node (e.g., language or family name) per line.<br>The first line contains the root node; subsequent lines contain child nodes.<br>Embedding is indicated with the appropriate number of dashes (-).<br>For an unlabeled node, use a dot (.).<br>To force a label not to wrap across lines, append ~.<br>To push a node up on a flat-style tree, append one ^ for each level (after ~, if present).<br>Styles are available as *bold* and _italic_.')
      textarea(name="tree",tabindex=15,rows=18,cols=40)
        | Proto-Indo-European~
        | -Balto-Slavic~
        | --Baltic
        | --Slavic
        | ---Russian
        | ---Polish
        | -Germanic
        | --English
        | --German
        | --Dutch
        | --Norwegian
        | -Albanian
        | -.
        | --Italic
        | --Celtic
        | -Greek
        | -Anatolian

  .clearfix
  #buttons
    button#preview Preview Tree
    button#latex Download LaTeX source
    button#pdf Download PDF
    button#template Paste Template

  #previewImage
