extends base

append js
  script(type='text/javascript',src='#{basepath}js/jquery-ui.min.js')
  script(type='text/javascript').
    var basepath = '#{basepath}';
    $(document).ready(function () {
      $('.tooltip').each(function () {
        var elt = $(this);

        elt.tooltip({
          position: { my: 'left+15 top-15', at: 'right center' },
          show: { effect: 'fade', duration: 300 },
          hide: { effect: 'fade', duration: 300 },
          content: elt.data('content'),
          items: '*'
        });
      });

      var copyarea = $('#copyarea');
      var form = $('#form');
      var previewimage = $('#previewimage');

      $('#fontoptToggle a').click(function () {
        var el = $(this);
        var target = $('#' + el.data('div'));

        target.toggle();

        if (target.css('display') === 'none') el.css('font-weight', 'normal');
        else el.css('font-weight', 'bold');
      });

      $('#preview').click(function () {
        previewimage.html('Loading preview...');
        $.post(basepath+'png', $('#form').serializeArray(), function (data) {
          previewimage.html('');
          previewimage.append($("<img />").attr('src', basepath+'png/'+data.id));
        });
      });

      $('#latex').click(function () { downloadFile('tex') });
      $('#pdf').click(function () { downloadFile('pdf') });

      $('#pastetree').click(function () {
        var json = prompt("Paste the tree info here:");
        if (json === null) return;

        try {
          json = $.parseJSON(json.trim().replace(/^%\s*/,''));

          for (var i in json) {
            var elt = form.find('[name='+i+']');

            if (!elt.length) throw 'not found';
            else if (elt.length > 1) elt.val([json[i]]);
            else {
              if (elt.is('input[type="checkbox"]')) elt.prop('checked', json[i] ? true : false);
              else elt.val(json[i]);
            }
          }

          previewimage.html('tree loaded successfully');
        } catch (e) {
          previewimage.html('invalid tree, could not load');
        }
      });

      $('#copytree').click(function () {
        var p = {};

        $.each(form.serializeArray(), function (i, field) {
          p[field.name] = field.value;
        });

        form.find('input[type="checkbox"]').each(function () {
          if (!this.checked) p[this.name] = 0;
        });

        copyarea.val(JSON.stringify(p, Object.keys(p).sort()));
        copyarea.select();

        try {
          document.execCommand('copy');
          previewimage.html('tree copied to clipboard');
        } catch (e) {
          previewimage.html('could not copy tree to clipboard');        
        }
      });
    });

    function downloadFile(ext) {
      $.post(basepath+ext, $('#form').serializeArray(), function (data) {
        window.location.pathname = basepath+ext+'/'+data.id+'/'+data.name+'.'+ext;
      });
    }

block body
  h1 LaTreeX: LaTeX-based tree generator

  form#form(method='post',action='/')

    .left
      .rowform#space
        ul
          li
            label.wide Space between sibling nodes:
            input(type='text',name='treesep',value='4ex',size=6,maxlength=6,tabindex=1)
            span.tooltip.ui-icon.ui-icon-info(data-content='Space between daughters of the same parent, e.g., <em>Baltic</em> and <em>Slavic</em>')
          li
            label.wide Parent to daughter length:
            input(type='text',name='levelsep',value='2cm',size=6,maxlength=6,tabindex=2)
            span.tooltip.ui-icon.ui-icon-info(data-content='Length between parents and daughters, e.g., <em>Balto-Slavic</em> and <em>Baltic</em>')
          li
            label.wide Maximum node label width:
            input(type='text',name='LFTwidth',value='15ex',size=6,maxlength=6,tabindex=3)
            span.tooltip.ui-icon.ui-icon-info(data-content='Maximum width of node labels (language or family names) before wrapping to another line (can be overridden for an individual label by appending ~ to it)')
          li
            label.wide Node label padding:
            input(type='text',name='LFTsep',value='4pt',size=6,maxlength=6,tabindex=4)
            span.tooltip.ui-icon.ui-icon-info(data-content='Whitespace padding/cushion around node labels (language or family names)')
          li
            label.wide Line thickness:
            input(type='text',name='linewidth',value='0.3pt',size=6,maxlength=6,tabindex=5)
            span.tooltip.ui-icon.ui-icon-info(data-content='Thickness of lines connecting nodes')

      .rowform.left#style
        ul
          li Style:
            span.tooltip.ui-icon.ui-icon-info(data-content='In non-flat trees, parent and daughter nodes are always the same distance apart. In flat trees, leaf nodes (nodes with no children) are all displayed parallel to each other. Flat style is generally only practical for smaller trees.<br><br><em>Center labels</em> will vertically center labels on the same level in a vertical tree. It can be useful if you have multiline labels.')
          li
            input#style_nonflat(type='radio',name='style',value='nonflat',checked='checked',tabindex=6)
            label(for='style_nonflat') Non-flat
          li
            input#style_flat(type='radio',name='style',value='flat',tabindex=7)
            label(for='style_flat') Flat
          li.checkbox
            input#centerlabels(type='checkbox',name='centerlabels',value='1',tabindex=13)
            label(for='centerlabels') Center labels


      .rowform.left
        ul
          li Direction:
          li
            input#orient_D(type='radio',name='orient',value='D',checked='checked',tabindex=8)
            label(for='orient_D') Top to bottom
          li
            input#orient_R(type='radio',name='orient',value='R',tabindex=9)
            label(for='orient_R') Left to right
          li
            input#orient_L(type='radio',name='orient',value='L',tabindex=10)
            label(for='orient_L') Right to left
          li
            input#orient_U(type='radio',name='orient',value='U',tabindex=11)
            label(for='orient_U') Bottom to top

      .rowform.left#font
        ul
          li Font:
            span.tooltip.ui-icon.ui-icon-info(data-content='The main dropdown lets you choose your main font. To show additional options, click the highlighted sections below. The ligatures section lets you turn on extra (“Rare”) ligatures. The other sections let you override the font for particular scripts. Note that if you hide a section again, your choice will be preserved.')
          li
            select#fontselect(name='font',tabindex=12)
              option(value='arial') Arial
              option(value='bookman') Bookman
              option(value='schoolbook') Century Schoolbook
              option(value='cardo') Cardo
              option(value='charis') Charis SIL
              option(value='charter') Charter
              option(value='cm') CMU Serif
              option(value='courier') Courier
              option(value='courier_new') Courier New
              option(value='helvetica') Helvetica
              option(value='junicode') Junicode
              option(value='noto_mono') Noto Mono
              option(value='noto_sans', selected='selected') Noto Sans
              option(value='noto_serif') Noto Serif
              option(value='palatino') Palatino
              option(value='times') Times
              option(value='times_mac') Times (Mac)
          li#fontoptToggle
            | Font options: 
            a(data-div='ligatures', href='javascript:void(0)') Ligatures
            | , 
            a(data-div='arabic', href='javascript:void(0)') Arabic
            | , 
            a(data-div='cjk', href='javascript:void(0)') CJK
            | , 
            a(data-div='greek', href='javascript:void(0)') Greek
            | , 
            a(data-div='hebrew', href='javascript:void(0)') Hebrew
            | , 
            a(data-div='syriac', href='javascript:void(0)') Syriac
        #fontopt
          ul
            #ligatures
              li.checkbox
                input#ligatures_input(type='checkbox',name='ligatures',value='1',tabindex=13)
                label(for='ligatures_input') Extra Ligatures
            #arabic
              li Arabic:
              li
                select(name='arabic',tabindex=14)
                  option(value='noop') (no override)
                  option(value='amiri', selected='selected') Amiri
                  option(value='arefruqaa') Aref Ruqaa
                  option(value='hussaini_nastaleeq') Hussaini Nastaleeq
                  option(value='noto_kufi') Noto Kufi Arabic
                  option(value='noto_naskh') Noto Naskh Arabic
                  option(value='noto_nastaliq') Noto Nastaliq Urdu
            #cjk
              li CJK:
              li
                select(name='cjk',tabindex=15)
                  option(value='noop') (no override)
                  option(value='adobe_kaiti') Adobe Kaiti Std
                  option(value='babelstone') BabelStone Han
                  option(value='noto_jp') Noto Sans CJK JP
                  option(value='noto_kr') Noto Sans CJK KR
                  option(value='noto_sc', selected='selected') Noto Sans CJK SC
                  option(value='noto_tc') Noto Sans CJK TC
                  option(value='stkaiti') STKaiti
            #greek
              li Greek:
              li
                select(name='greek',tabindex=16)
                  option(value='noop', selected='selected') (no override)
                  option(value='alfios') Alfios
                  option(value='didot') GFS Didot Classic
                  option(value='neohellenic') GFS NeoHellenic
                  option(value='porson') GFS Porson
                  option(value='noto_mono') Noto Mono
                  option(value='noto_sans') Noto Sans
                  option(value='noto_serif') Noto Serif
                  option(value='times_mac') Times (Mac)
            #hebrew
              li Hebrew:
              li
                select(name='hebrew',tabindex=17)
                  option(value='noop') (no override)
                  option(value='cardo') Cardo
                  option(value='david') David CLM
                  option(value='ezra') Ezra SIL
                  option(value='mekorot_rashi') Mekorot Rashi
                  option(value='mekorot_vilna') Mekorot Vilna
                  option(value='noto_hebrew', selected='selected') Noto Sans Hebrew
            #syriac
              li Syriac:
              li
                select(name='syriac',tabindex=18)
                  option(value='noop') (no override)
                  option(value='syriac_eastern') Noto Sans Syriac Eastern
                  option(value='syriac_estrangela', selected='selected') Noto Sans Syriac Estrangela
                  option(value='syriac_western') Noto Sans Syriac Western

    .left
      p Enter tree:
        span.tooltip.ui-icon.ui-icon-info(data-content='Enter one node (e.g., language or family name) per line. The first line contains the root node; subsequent lines contain child nodes. Embedding is indicated with the appropriate number of dashes/hyphens (-). For an unlabeled node, use a dot (.). Styles are available as *bold* and _italic_.<br><br>To force a label not to wrap across lines, append ~.<br><br>To push a node up on a flat-style tree, append one ^ for each level (after ~, if present).')
      textarea(name='tree',rows=18,cols=40,tabindex=20)
        | Proto-Indo-European~
        | -Balto-Slavic~
        | --Baltic
        | --Slavic
        | ---Russian
        | ---Polish
        | -Germanic
        | --English
        | --German
        | --Dutch
        | --Norwegian
        | -Albanian
        | -.
        | --Italic
        | --Celtic
        | -Greek
        | -Anatolian

  .clearfix
  #buttons
    button#preview(tabindex=21) Preview Tree
    button#latex(tabindex=22) Download LaTeX source
    button#pdf(tabindex=23) Download PDF
    button#copytree(tabindex=24) Copy Tree
    button#pastetree(tabindex=25) Paste Tree

  #previewimage

  textarea#copyarea
