extends base

append js
  script(type='text/javascript',src='#{basepath}js/jquery-ui.min.js')
  script(type='text/javascript').
    var basepath = '#{basepath}';
    $(document).ready(function () {
      $('.tooltip').each(function () {
        var elt = $(this);

        elt.tooltip({
          position: { my: 'left+15 top-15', at: 'right center' },
          show: { effect: 'fade', duration: 300 },
          hide: { effect: 'fade', duration: 300 },
          content: elt.data('content'),
          items: '*'
        });
      });

      var copyarea = $('#copyarea');
      var form = $('#form');
      var multitreeDialog = $('#multitreeDialog');
      var pastetreeDialog = $('#pastetreeDialog');
      var previewimage = $('#previewimage');
      var tree = $('#tree');

      $('#fontoptToggle a').click(function () {
        var elt = $(this);
        var target = $('#' + elt.data('div'));

        target.toggle();

        if (target.css('display') === 'none') elt.css('font-weight', 'normal');
        else elt.css('font-weight', 'bold');
      });

      $('#preview').click(function () {
        display('Loading preview...');
        $.post(basepath+'png', form.serializeArray())
        .done(function (data) {
          display($('<img>').attr('src', basepath+'png/'+data.id));
        })
        .fail(function () {
          display('Failed to load preview');
        });
      });

      $('#latex').click(function () { downloadFile('tex') });
      $('#pdf').click(function () { downloadFile('pdf') });

      $('#copytree').click(function () {
        var p = {};

        $.each(form.serializeArray(), function (i, field) {
          p[field.name] = field.value;
        });

        form.find('input[type=checkbox]').each(function () {
          if (!this.checked) p[this.name] = 0;
        });

        copyarea.val(JSON.stringify(p, Object.keys(p).sort()));
        copyarea.select();

        try {
          document.execCommand('copy');
          display('Tree copied to clipboard');
        } catch (e) {
          display('Could not copy tree to clipboard');        
        }
      });

     pastetreeDialog.dialog({
        autoOpen:   false,
        buttons:    { 'Load Tree': pasteTree },
        draggable:  false,
        hide:       { effect: 'fade', duration: 200 },
        modal:      true,
        resizable:  false,
        show:       { effect: 'fade', duration: 200 },
        title:      'Paste Tree',
        width:      400
      });

      function pasteTree() {
        pastetreeDialog.dialog('close');
        var json = pastetreeDialog.find('textarea').val();

        try {
          json = $.parseJSON(json.trim().replace(/^%\s*/,''));

          for (var i in json) {
            var elt = form.find('[name='+i+']');

            if (!elt.length) throw 'not found';
            else if (elt.length > 1) elt.val([json[i]]);
            else {
              if (elt.is('input[type=checkbox]')) elt.prop('checked', json[i] ? true : false);
              else elt.val(json[i]);
            }
          }

          display('Tree loaded successfully');
        } catch (e) {
          display('Invalid tree, could not load');
        }          
      }

      $('#pastetree').click(function () {
        pastetreeDialog.find('textarea').val('');
        pastetreeDialog.dialog('open');
      });

      multitreeDialog.dialog({
        autoOpen:   false,
        buttons:    { 'Load Tree': multiTree },
        draggable:  false,
        hide:       { effect: 'fade', duration: 200 },
        modal:      true,
        resizable:  false,
        show:       { effect: 'fade', duration: 200 },
        title:      'Load MultiTree',
        width:      400
      });

      function multiTree() {
        var id = multitreeDialog.find('input[name=id]').val().trim();
        var subgroup = multitreeDialog.find('input[name=subgroup]').val().trim();
        var dialect = multitreeDialog.find('input[name=dialect]').prop('checked') ? 1 : 0;

        if (!id.match(/^\d+$/)) {
          multitreeDialog.find('.error').html('Missing or invalid MultiTree ID (must be numeric)').show();
          return;
        }

        multitreeDialog.dialog('close');

        var url = basepath+'multitree/'+id;
        if (subgroup.length) url += '/'+subgroup;

        display('');
        $.get({ url: url, data: { dialect: dialect } })
        .done(function (data) {
          if (data === 'ELIMIT') display('MultiTree could not be loaded: tree too big');
          else if (data === 'ENOENT') display('MultiTree could not be loaded: subgroup not found');
          else {
            tree.val(data);
            display('MultiTree loaded successfully');          
          }
        })
        .fail(function () {
          display('MultiTree could not be loaded: tree not found or server error');
        });
      }

      $('#multitree').click(function () {
        multitreeDialog.find('input').val('');
        multitreeDialog.find('.error').hide();
        multitreeDialog.dialog('open');
      });

      function downloadFile(ext) {
        $.post(basepath+ext, form.serializeArray())
        .done(function (data) {
          window.location.pathname = basepath+ext+'/'+data.id+'/'+data.name+'.'+ext;
        })
        .fail(function () {
          previewimage.html('Download failed');
        });
      }

      function display(txt) {
        previewimage.html(txt);
      }
    });

block body
  .right
    a(href='https://github.com/kamholz/latreex') GitHub
  h1 LaTreeX: LaTeX-based tree generator

  form#form(method='post',action='/')

    .left
      .rowform.left#spacing
        ul
          li.heading Spacing:
            span.tooltip.ui-icon.ui-icon-info(data-content='Possible units are <code>ex</code> (height of “x” in current font), <code>em</code> (width of “M” in current font), <code>pt</code> (points), <code>cm</code> (centimeters), <code>mm</code> (millimeters), <code>in</code> (inches).')
          li
            label.wide Between sibling nodes:
            input(type='text',name='treesep',value='4ex',size=6,maxlength=6,tabindex=1)
            span.tooltip.ui-icon.ui-icon-info(data-content='Space between child nodes of the same parent, e.g., <em>Baltic</em> and <em>Slavic</em>')
          li
            label.wide Parent to child length:
            input(type='text',name='levelsep',value='2cm',size=6,maxlength=6,tabindex=2)
            span.tooltip.ui-icon.ui-icon-info(data-content='Length between parent and child nodes, e.g., <em>Balto-Slavic</em> and <em>Baltic</em>')
          li
            label.wide Max node label width:
            input(type='text',name='LFTwidth',value='15ex',size=6,maxlength=6,tabindex=3)
            span.tooltip.ui-icon.ui-icon-info(data-content='Maximum width of node labels (language or family names) before wrapping to another line (can be overridden for an individual label by appending ~ to it)')
          li
            label.wide Node label padding:
            input(type='text',name='LFTsep',value='4pt',size=6,maxlength=6,tabindex=4)
            span.tooltip.ui-icon.ui-icon-info(data-content='Whitespace padding/cushion around node labels (language or family names)')
          li
            label.wide Line thickness:
            input(type='text',name='linewidth',value='0.3pt',size=6,maxlength=6,tabindex=5)
            span.tooltip.ui-icon.ui-icon-info(data-content='Thickness of lines connecting nodes')

      .rowform.left#style
        ul
          li Style:
            span.tooltip.ui-icon.ui-icon-info(data-content='In non-flat trees, parent and child nodes are always the same distance apart. In flat trees, leaf nodes (nodes with no children) are all displayed parallel to each other. Flat style is generally only practical for smaller trees.<br><br><b>Center labels</b> will vertically center labels on the same level in a vertical tree. It can be useful if you have multiline labels.')
          li: label
            input(type='radio',name='style',value='nonflat',checked='checked',tabindex=6)
            span Non-flat
          li: label
            input(type='radio',name='style',value='flat',tabindex=7)
            span Flat
          li.checkbox: label
            input(type='checkbox',name='centerlabels',value='1',tabindex=8)
            span Center labels

      .clearfix
      .rowform.left#direction
        ul
          li Direction:
            span.tooltip.ui-icon.ui-icon-info.hidden
          li: label
            span Top to bottom
            input(type='radio',name='orient',value='D',checked='checked',tabindex=9)
          li: label
            span Left to right
            input(type='radio',name='orient',value='R',tabindex=10)
          li: label
            span Right to left
            input(type='radio',name='orient',value='L',tabindex=11)
          li: label
            span Bottom to top
            input(type='radio',name='orient',value='U',tabindex=12)

      .rowform.left#font
        ul
          li Font:
            span.tooltip.ui-icon.ui-icon-info(data-content='The main dropdown lets you choose your main font. To show additional options, click the highlighted sections below. The ligatures section lets you turn on extra (“Rare”) ligatures. The other sections let you override the font for particular scripts. Note that if you hide a section, your choice will still be remembered.')
          li
            select#fontselect(name='font',tabindex=13)
              option(value='arial') Arial
              option(value='bookman') Bookman
              option(value='schoolbook') Century Schoolbook
              option(value='cardo') Cardo
              option(value='charis') Charis SIL
              option(value='charter') Charter
              option(value='cm') CMU Serif
              option(value='courier') Courier
              option(value='courier_new') Courier New
              option(value='helvetica') Helvetica
              option(value='junicode') Junicode
              option(value='noto_mono') Noto Mono
              option(value='noto_sans', selected) Noto Sans
              option(value='noto_serif') Noto Serif
              option(value='palatino') Palatino
              option(value='times') Times
              option(value='times_mac') Times (Mac)
          li#fontoptToggle
            | Font options: 
            a(data-div='ligatures', href='javascript:void(0)') Ligatures
            | , 
            a(data-div='arabic', href='javascript:void(0)') Arabic
            | , 
            a(data-div='cjk', href='javascript:void(0)') CJK
            | , 
            a(data-div='greek', href='javascript:void(0)') Greek
            | , 
            a(data-div='hebrew', href='javascript:void(0)') Hebrew
            | , 
            a(data-div='syriac', href='javascript:void(0)') Syriac
        #fontopt
          ul
            #ligatures
              li.checkbox: label
                input(type='checkbox',name='ligatures',value='1',tabindex=14)
                span Extra Ligatures
            #arabic
              li Arabic:
              li
                select(name='arabic',tabindex=15)
                  option(value='noop') (no override)
                  option(value='amiri', selected) Amiri
                  option(value='arefruqaa') Aref Ruqaa
                  option(value='hussaini_nastaleeq') Hussaini Nastaleeq
                  option(value='noto_kufi') Noto Kufi Arabic
                  option(value='noto_naskh') Noto Naskh Arabic
                  option(value='noto_nastaliq') Noto Nastaliq Urdu
            #cjk
              li CJK:
              li
                select(name='cjk',tabindex=16)
                  option(value='noop') (no override)
                  option(value='adobe_kaiti') Adobe Kaiti Std
                  option(value='babelstone') BabelStone Han
                  option(value='noto_jp') Noto Sans CJK JP
                  option(value='noto_kr') Noto Sans CJK KR
                  option(value='noto_sc', selected) Noto Sans CJK SC
                  option(value='noto_tc') Noto Sans CJK TC
                  option(value='stkaiti') STKaiti
            #greek
              li Greek:
              li
                select(name='greek',tabindex=17)
                  option(value='noop', selected) (no override)
                  option(value='alfios') Alfios
                  option(value='didot') GFS Didot Classic
                  option(value='neohellenic') GFS NeoHellenic
                  option(value='porson') GFS Porson
                  option(value='noto_mono') Noto Mono
                  option(value='noto_sans') Noto Sans
                  option(value='noto_serif') Noto Serif
                  option(value='times_mac') Times (Mac)
            #hebrew
              li Hebrew:
              li
                select(name='hebrew',tabindex=18)
                  option(value='noop') (no override)
                  option(value='cardo') Cardo
                  option(value='david') David CLM
                  option(value='ezra') Ezra SIL
                  option(value='mekorot_rashi') Mekorot Rashi
                  option(value='mekorot_vilna') Mekorot Vilna
                  option(value='noto_hebrew', selected) Noto Sans Hebrew
            #syriac
              li Syriac:
              li
                select(name='syriac',tabindex=19)
                  option(value='noop') (no override)
                  option(value='syriac_eastern') Noto Sans Syriac Eastern
                  option(value='syriac_estrangela', selected) Noto Sans Syriac Estrangela
                  option(value='syriac_western') Noto Sans Syriac Western

    .left
      p Enter tree:
        span.tooltip.ui-icon.ui-icon-info(data-content='Enter one node (e.g., language or family name) per line. The first line contains the root node; subsequent lines contain child nodes. Embedding is indicated with the appropriate number of dashes/hyphens (-). For an unlabeled node, use a dot (.).<br><br>To force a label not to wrap across lines, append ~. To push a node up on a flat-style tree, append one ^ for each level (after ~, if present).<br><br>Some LaTeX formatting commands are available. To style text, use one of the following: <code>\\textbf</code> (bold), <code>\\textit</code> (italic), <code>\\textrm</code> (plain), <code>\\textsc</code> (small caps), <code>\\textsubscript</code>, <code>\\textsuperscript</code>, <code>\\underline</code>. These take a single argument in curly braces: <code>\\textbf{sample}</code> produces <b>sample</b>.<br><br>To insert a linebreak, use <code>\\newline{}</code>. To change the font size, use one of the following (from smallest to largest): <code>\\tiny{}</code>, <code>\\scriptsize{}</code>, <code>\\footnotesize{}</code>, <code>\\small{}</code> (the default), <code>\\normalsize{}</code>, <code>\\large{}</code>, <code>\\Large{}</code>, <code>\\LARGE{}</code>, <code>\\huge{}</code>, <code>\\HUGE{}</code>.')
      textarea#tree(name='tree',rows=18,cols=40,tabindex=20)
        | Proto-Indo-European~
        | -Balto-Slavic~
        | --Baltic
        | --Slavic
        | ---Russian
        | ---Polish
        | -Germanic
        | --English
        | --German
        | --Dutch
        | --Norwegian
        | -Albanian
        | -.
        | --Italic
        | --Celtic
        | -Greek
        | -Anatolian

  .clearfix
  #buttons
    button#preview(tabindex=21) Preview Tree
    button#latex(tabindex=22) Download LaTeX source
    button#pdf(tabindex=23) Download PDF
    button#copytree(tabindex=24) Copy Tree
    button#pastetree(tabindex=25) Paste Tree
    button#multitree(tabindex=26) Load MultiTree

  #previewimage

  #pastetreeDialog.dialog
    label
      | Enter tree data (from Copy Tree or LaTeX source):
      textarea(autofocus,rows=5)

  #multitreeDialog.dialog
    label
      span
        a(href='http://new.multitree.org') MultiTree
        |  numeric ID:
      input(type='text',name='id',inputmode='numeric',size=5,maxlength=5,autofocus,placeholder='19655')
      | *
    label
      span Subgroup name:
      input(type='text',name='subgroup',size=20,placeholder='Anatolian')
    label
      span Include dialects:
      input(type='checkbox',name='dialect')
    .error

  textarea#copyarea
